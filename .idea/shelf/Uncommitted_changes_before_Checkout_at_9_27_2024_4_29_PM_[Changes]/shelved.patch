Index: BE/Koi-Express/src/main/resources/application.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring:\r\n  application:\r\n    name: Koi-Express\r\n\r\n  datasource:\r\n    url: jdbc:mysql://localhost:3306/koi_express\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n\r\n    hikari:\r\n      maximum-pool-size: 10\r\n      connection-timeout: 20000\r\n      idle-timeout: 300000\r\n      max-lifetime: 1800000\r\n\r\n  jpa:\r\n    hibernate:\r\n      ddl-auto: update\r\n    show-sql: true\r\n    properties:\r\n      hibernate.dialect: org.hibernate.dialect.MySQL8Dialect\r\n\r\n    main:\r\n      allow-circular-references: true\r\n\r\njwt:\r\n  secret-key: \"Qcm41hV7dw/EE0Eo8oY87pkREbUoZaU78LZZCbsCq9iqCBWmFUqsLVHVA36CGOEr\"\r\n\r\nspring.config.import: \"classpath:application-secret.yaml\"\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/Koi-Express/src/main/resources/application.yaml b/BE/Koi-Express/src/main/resources/application.yaml
--- a/BE/Koi-Express/src/main/resources/application.yaml	
+++ b/BE/Koi-Express/src/main/resources/application.yaml	
@@ -25,5 +25,20 @@
 jwt:
   secret-key: "Qcm41hV7dw/EE0Eo8oY87pkREbUoZaU78LZZCbsCq9iqCBWmFUqsLVHVA36CGOEr"
 
+nexmo:
+  api_key: "da36acba"
+  api_secret: "dE3EZIshvaIHIfYy"
+  brandname: "Koi-Express"
+
+twilio:
+  account:
+    sid: YOUR_ACCOUNT_SID
+  auth:
+    token: YOUR_AUTH_TOKEN
+  phone:
+    number: YOUR_TWILIO_PHONE_NUMBER
+
+
+
 spring.config.import: "classpath:application-secret.yaml"
 
Index: BE/Koi-Express/src/main/java/com/koi_express/service/CustomerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.koi_express.service;\r\n\r\nimport com.koi_express.JWT.JwtUtil;\r\nimport com.koi_express.dto.request.LoginRequest;\r\nimport com.koi_express.dto.request.RegisterRequest;\r\nimport com.koi_express.dto.request.UpdateRequest;\r\nimport com.koi_express.dto.response.ApiResponse;\r\nimport com.koi_express.entity.Customers;\r\nimport com.koi_express.enums.AuthProvider;\r\nimport com.koi_express.enums.Role;\r\nimport com.koi_express.exception.AppException;\r\nimport com.koi_express.exception.ErrorCode;\r\nimport com.koi_express.repository.CustomersRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.Optional;\r\n\r\n@Service\r\npublic class CustomerService {\r\n\r\n    private final CustomersRepository customersRepository;\r\n    private final PasswordEncoder passwordEncoder;\r\n    private final JwtUtil jwtUtil;\r\n\r\n    @Autowired\r\n    public CustomerService(CustomersRepository customersRepository, PasswordEncoder passwordEncoder, JwtUtil jwtUtil) {\r\n        this.customersRepository = customersRepository;\r\n        this.passwordEncoder = passwordEncoder;\r\n        this.jwtUtil = jwtUtil;\r\n    }\r\n\r\n    public ApiResponse<Customers> registerCustomer(RegisterRequest registerRequest) {\r\n\r\n        if (customersRepository.existsByPhoneNumber(registerRequest.getPhoneNumber()))\r\n            throw new AppException(ErrorCode.USER_EXISTED);\r\n\r\n        String email = registerRequest.getEmail() != null ? registerRequest.getEmail() : registerRequest.getPhoneNumber() + \"@noemail.com\";\r\n\r\n        String encodedPassword = passwordEncoder.encode(registerRequest.getPassword());\r\n\r\n        Customers customer = Customers.builder()\r\n                .fullName(registerRequest.getFullName())\r\n                .phoneNumber(registerRequest.getPhoneNumber())\r\n                .email(email)\r\n                .passwordHash(encodedPassword) // Sử dụng sdt làm mật khẩu và mã hóa\r\n                .authProvider(AuthProvider.LOCAL) // Đăng ký bằng số điện thoại nên authProvider là LOCAL\r\n                .role(Role.CUSTOMER) // Mặc định role là CUSTOMER\r\n                .createdAt(LocalDateTime.now()) // Lưu thời gian đăng ký\r\n                .build();\r\n\r\n        customersRepository.save(customer);\r\n        return new ApiResponse<>(HttpStatus.OK.value(), \"User registration successfully\", customer);\r\n\r\n    }\r\n\r\n    public ApiResponse<String> authenticateCustomer(LoginRequest loginRequest) {\r\n        Customers customer = customersRepository.findByPhoneNumber(loginRequest.getPhoneNumber())\r\n                .orElseThrow(() -> new RuntimeException(\"Invalid phone number\"));\r\n\r\n        if(!passwordEncoder.matches(loginRequest.getPassword(), customer.getPasswordHash())) {\r\n            throw new AppException(ErrorCode.PASSWORD_INCORRECT);\r\n        }\r\n\r\n        String token = jwtUtil.generateToken(customer.getPhoneNumber(), \"Koi-Express\", customer.getRole().name());\r\n\r\n        return new ApiResponse<>(HttpStatus.OK.value(), \"Login successfully\", token);\r\n    }\r\n\r\n    public Customers getCustomerDetails(String phoneNumber) {\r\n        return customersRepository.findByPhoneNumber(phoneNumber)\r\n                .orElseThrow(() -> new AppException(ErrorCode.CUSTOMER_NOT_FOUND));\r\n    }\r\n\r\n    public ApiResponse<Customers> updateCustomer(Long id, UpdateRequest updateRequest) {\r\n        Customers customer = customersRepository.findById(id)\r\n                .orElseThrow(() -> new AppException(ErrorCode.CUSTOMER_NOT_FOUND));\r\n\r\n        customer.setFullName(updateRequest.getFullName());\r\n        customer.setAddress(updateRequest.getAddress());\r\n\r\n        customersRepository.save(customer);\r\n        return new ApiResponse<>(HttpStatus.OK.value(), \"Customer updated successfully\", customer);\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/Koi-Express/src/main/java/com/koi_express/service/CustomerService.java b/BE/Koi-Express/src/main/java/com/koi_express/service/CustomerService.java
--- a/BE/Koi-Express/src/main/java/com/koi_express/service/CustomerService.java	
+++ b/BE/Koi-Express/src/main/java/com/koi_express/service/CustomerService.java	
@@ -88,6 +88,18 @@
         return new ApiResponse<>(HttpStatus.OK.value(), "Customer updated successfully", customer);
     }
 
+    public boolean customerExists(String phoneNumber) {
+        return customersRepository.existsByPhoneNumber(phoneNumber);
+    }
+
+    public ApiResponse<Customers> completeRegistration(String phoneNumber) {
+        Customers customers = customersRepository.findByPhoneNumber(phoneNumber)
+                .orElseThrow(() -> new AppException(ErrorCode.CUSTOMER_NOT_FOUND));
 
+        customers.setVerified(true);
+        customersRepository.save(customers);
+
+        return new ApiResponse<>(HttpStatus.OK.value(), "Registration completed successfully", customers);
+    }
 
 }
Index: BE/Koi-Express/src/main/java/com/koi_express/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.koi_express.config;\r\n\r\nimport com.koi_express.JWT.JwtFilter;\r\nimport com.koi_express.service.CustomOAuth2UserService;\r\nimport com.koi_express.service.CustomerDetailsService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.cors.CorsConfigurationSource;\r\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\r\n\r\nimport java.util.Arrays;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\n@EnableMethodSecurity\r\npublic class SecurityConfig {\r\n\r\n    @Autowired\r\n    private JwtFilter jwtFilter;\r\n\r\n    private final CustomOAuth2UserService customOAuth2UserService;\r\n\r\n    private final CustomerDetailsService customerDetailsService;\r\n\r\n    public SecurityConfig(CustomOAuth2UserService customOAuth2UserService, CustomerDetailsService customerDetailsService) {\r\n        this.customOAuth2UserService = customOAuth2UserService;\r\n        this.customerDetailsService = customerDetailsService;\r\n    }\r\n\r\n    @Bean\r\n    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n                .csrf(csrf -> csrf.disable())\r\n                .authorizeHttpRequests(authorizeRequests ->\r\n                        authorizeRequests\r\n                                .requestMatchers(\"/\",\r\n                                        \"/login\",\r\n                                        \"/oauth2/**\",\r\n                                        \"/api/auth/**\",\r\n                                        \"/api/customers/**\",\r\n                                        \"/api/customers/update/**\",\r\n                                        \"/api/customers/delete/**\",\r\n                                        \"/api/manager/**\",\r\n                                        \"/api/manager/id/**\").permitAll()\r\n                                .anyRequest().authenticated()\r\n                )\r\n                .oauth2Login(oauth2 -> oauth2\r\n                        .userInfoEndpoint(userInfo ->\r\n                                userInfo.userService(customOAuth2UserService) // Sử dụng CustomOAuth2UserService\r\n                        )\r\n                        .defaultSuccessUrl(\"/api/auth/userinfo\", true)\r\n                        .failureUrl(\"/login?error=true\")\r\n                )\r\n                .logout(logout -> logout\r\n                        .logoutSuccessUrl(\"/login\")\r\n                )\r\n\r\n\r\n                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/Koi-Express/src/main/java/com/koi_express/config/SecurityConfig.java b/BE/Koi-Express/src/main/java/com/koi_express/config/SecurityConfig.java
--- a/BE/Koi-Express/src/main/java/com/koi_express/config/SecurityConfig.java	
+++ b/BE/Koi-Express/src/main/java/com/koi_express/config/SecurityConfig.java	
@@ -13,11 +13,6 @@
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.security.web.SecurityFilterChain;
 import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
-import org.springframework.web.cors.CorsConfiguration;
-import org.springframework.web.cors.CorsConfigurationSource;
-import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
-
-import java.util.Arrays;
 
 @Configuration
 @EnableWebSecurity
@@ -45,7 +40,9 @@
                                 .requestMatchers("/",
                                         "/login",
                                         "/oauth2/**",
-                                        "/api/auth/**",
+                                        "/api/auth/register",
+                                        "/api/auth/verify-otp",
+                                        "/api/auth/login",
                                         "/api/customers/**",
                                         "/api/customers/update/**",
                                         "/api/customers/delete/**",
Index: BE/Koi-Express/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>3.3.4</version>\r\n\t\t<relativePath/>\r\n\t</parent>\r\n\t<groupId>com.koi_express</groupId>\r\n\t<artifactId>Koi-Express</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>Koi-Express</name>\r\n\t<description>Koi-Express</description>\r\n\t<url/>\r\n\t<licenses>\r\n\t\t<license/>\r\n\t</licenses>\r\n\t<developers>\r\n\t\t<developer/>\r\n\t</developers>\r\n\t<scm>\r\n\t\t<connection/>\r\n\t\t<developerConnection/>\r\n\t\t<tag/>\r\n\t\t<url/>\r\n\t</scm>\r\n\t<properties>\r\n\t\t<java.version>21</java.version>\r\n\t</properties>\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jdbc</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-oauth2-client</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.mysql</groupId>\r\n\t\t\t<artifactId>mysql-connector-j</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t<optional>true</optional>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.security</groupId>\r\n\t\t\t<artifactId>spring-security-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.security</groupId>\r\n\t\t\t<artifactId>spring-security-crypto</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-validation</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.jsonwebtoken</groupId>\r\n\t\t\t<artifactId>jjwt-api</artifactId>\r\n\t\t\t<version>0.11.2</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.jsonwebtoken</groupId>\r\n\t\t\t<artifactId>jjwt-impl</artifactId>\r\n\t\t\t<version>0.11.2</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.jsonwebtoken</groupId>\r\n\t\t\t<artifactId>jjwt-jackson</artifactId>\r\n\t\t\t<version>0.11.2</version>\r\n\t\t</dependency>\r\n\r\n\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<excludes>\r\n\t\t\t\t\t\t<exclude>\r\n\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t\t\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t\t\t\t</exclude>\r\n\t\t\t\t\t</excludes>\r\n\t\t\t\t</configuration>\r\n\t\t\t</plugin>\r\n\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/Koi-Express/pom.xml b/BE/Koi-Express/pom.xml
--- a/BE/Koi-Express/pom.xml	
+++ b/BE/Koi-Express/pom.xml	
@@ -96,6 +96,19 @@
 			<version>0.11.2</version>
 		</dependency>
 
+		<dependency>
+			<groupId>com.vonage</groupId>
+			<artifactId>client</artifactId>
+			<version>8.1.0</version>
+		</dependency>
+
+		<dependency>
+			<groupId>com.twilio.sdk</groupId>
+			<artifactId>twilio</artifactId>
+			<version>8.25.0</version>
+		</dependency>
+
+
 
 	</dependencies>
 
Index: BE/Koi-Express/src/main/java/com/koi_express/controller/AuthController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.koi_express.controller;\r\n\r\nimport com.koi_express.dto.request.LoginRequest;\r\nimport com.koi_express.dto.request.RegisterRequest;\r\nimport com.koi_express.dto.response.ApiResponse;\r\nimport com.koi_express.entity.Customers;\r\nimport com.koi_express.service.CustomerService;\r\nimport jakarta.validation.Valid;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\r\nimport org.springframework.security.oauth2.core.user.OAuth2User;\r\nimport org.springframework.validation.BindingResult;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/auth\")\r\npublic class AuthController {\r\n\r\n    @Autowired\r\n    private CustomerService customerService;\r\n\r\n    @PostMapping(\"/register\")\r\n    public ResponseEntity<ApiResponse<Customers>> registerUser(@RequestBody @Valid RegisterRequest registerRequest, BindingResult bindingResult) {\r\n\r\n        if (bindingResult.hasErrors()) {\r\n            String errorMessage = bindingResult.getFieldError() != null ? bindingResult.getFieldError().getDefaultMessage() : \"Validation failed\";\r\n            return ResponseEntity.badRequest().body(new ApiResponse<>(HttpStatus.BAD_REQUEST.value(), errorMessage, null));\r\n        }\r\n\r\n        ApiResponse<Customers> response = customerService.registerCustomer(registerRequest);\r\n\r\n        if(response.getCode() == HttpStatus.OK.value()){\r\n            return ResponseEntity.ok(response);\r\n        } else {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);\r\n        }\r\n    }\r\n\r\n    @PostMapping(\"/login\")\r\n    public ResponseEntity<ApiResponse<String>> authenticateUser(@RequestBody @Valid LoginRequest loginRequest, BindingResult bindingResult) {\r\n\r\n        if (bindingResult.hasErrors()) {\r\n            String errorMessage = bindingResult.getFieldError() != null ? bindingResult.getFieldError().getDefaultMessage() : \"Validation failed\";\r\n            return ResponseEntity.badRequest().body(new ApiResponse<>(HttpStatus.BAD_REQUEST.value(), errorMessage, null));\r\n        }\r\n\r\n        ApiResponse<String> response = customerService.authenticateCustomer(loginRequest);\r\n\r\n        if(response.getCode() == HttpStatus.OK.value()){\r\n            return ResponseEntity.ok(response);\r\n        } else {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/google\")\r\n    public ResponseEntity<ApiResponse<String>> googleLogin(@AuthenticationPrincipal OAuth2User oAuth2User){\r\n        String email = oAuth2User.getAttribute(\"email\");\r\n        String name = oAuth2User.getAttribute(\"name\");\r\n\r\n        if (email == null || name == null) {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST)\r\n                    .body(new ApiResponse<>(HttpStatus.BAD_REQUEST.value(), \"OAuth2 login failed\", null));\r\n        }\r\n        \r\n        ApiResponse<String> response = new ApiResponse<>(HttpStatus.OK.value(), \"Google login successful\", email);\r\n        return ResponseEntity.ok(response);\r\n    }\r\n\r\n    @GetMapping(\"/facebook\")\r\n    public ResponseEntity<ApiResponse<String>> facebookLogin(@AuthenticationPrincipal OAuth2User oAuth2User){\r\n        String email = oAuth2User.getAttribute(\"email\");\r\n        String name = oAuth2User.getAttribute(\"name\");\r\n\r\n        ApiResponse<String> response = new ApiResponse<>(HttpStatus.OK.value(), \"Facebook login successful\", email);\r\n        return ResponseEntity.ok(response);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/Koi-Express/src/main/java/com/koi_express/controller/AuthController.java b/BE/Koi-Express/src/main/java/com/koi_express/controller/AuthController.java
--- a/BE/Koi-Express/src/main/java/com/koi_express/controller/AuthController.java	
+++ b/BE/Koi-Express/src/main/java/com/koi_express/controller/AuthController.java	
@@ -5,6 +5,8 @@
 import com.koi_express.dto.response.ApiResponse;
 import com.koi_express.entity.Customers;
 import com.koi_express.service.CustomerService;
+import com.koi_express.service.OtpService;
+import com.koi_express.service.OtpStorageService;
 import jakarta.validation.Valid;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
@@ -21,6 +23,13 @@
     @Autowired
     private CustomerService customerService;
 
+    @Autowired
+    private OtpService otpService;
+
+    @Autowired
+    private OtpStorageService otpStorageService;
+
+
     @PostMapping("/register")
     public ResponseEntity<ApiResponse<Customers>> registerUser(@RequestBody @Valid RegisterRequest registerRequest, BindingResult bindingResult) {
 
@@ -29,14 +38,28 @@
             return ResponseEntity.badRequest().body(new ApiResponse<>(HttpStatus.BAD_REQUEST.value(), errorMessage, null));
         }
 
-        ApiResponse<Customers> response = customerService.registerCustomer(registerRequest);
+        if (customerService.customerExists(registerRequest.getPhoneNumber())) {
+            return ResponseEntity.badRequest().body(new ApiResponse<>(HttpStatus.BAD_REQUEST.value(), "Phone number already registered.", null));
+        }
+
+        String otp = otpStorageService.generateOtp(registerRequest.getPhoneNumber());
+        otpService.sendOtp(registerRequest.getPhoneNumber(), otp);
+
+        return ResponseEntity.ok(new ApiResponse<>(HttpStatus.OK.value(), "OTP sent to your phone. Please verify to complete registration.", null));
+    }
+
+    @PostMapping("/verify-otp")
+    public ResponseEntity<ApiResponse<String>> verifyOtp(@RequestParam  String phoneNumber, @RequestParam String otp) {
+        if(otpStorageService.verifyOtp(phoneNumber, otp)) {
 
-        if(response.getCode() == HttpStatus.OK.value()){
-            return ResponseEntity.ok(response);
+            ApiResponse<Customers> response = customerService.completeRegistration(phoneNumber);
+
+            return ResponseEntity.ok(new ApiResponse<>(HttpStatus.OK.value(), "Registration successful", response.getResult().getEmail()));
         } else {
-            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
+            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new ApiResponse<>(HttpStatus.BAD_REQUEST.value(), "Invalid OTP", null));
         }
     }
+
 
     @PostMapping("/login")
     public ResponseEntity<ApiResponse<String>> authenticateUser(@RequestBody @Valid LoginRequest loginRequest, BindingResult bindingResult) {
Index: BE/Koi-Express/src/main/resources/application-secret.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring:\r\n  security:\r\n    user:\r\n      name: user\r\n      password: password\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          google:\r\n            client-id: 230790509660-s304ceefoirbiltr80mscfloqfjq2kl5.apps.googleusercontent.com\r\n            client-secret: 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\r\n            scope:\r\n              - profile\r\n              - email\r\n          facebook:\r\n            client-id: 1216046793001793\r\n            client-secret: a7df9a9d988432151aa19fe1e7e19d64\r\n            scope:\r\n              - public_profile\r\n              - email\r\n\r\n  datasource:\r\n    username: root\r\n    password: 12345\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/Koi-Express/src/main/resources/application-secret.yaml b/BE/Koi-Express/src/main/resources/application-secret.yaml
--- a/BE/Koi-Express/src/main/resources/application-secret.yaml	
+++ b/BE/Koi-Express/src/main/resources/application-secret.yaml	
@@ -12,12 +12,18 @@
             scope:
               - profile
               - email
+            redirect-uri: "http://localhost:8080/oauth2/authorization/google"
+            authorization-grant-type: authorization_code
+            client-name: Google
           facebook:
             client-id: 1216046793001793
             client-secret: a7df9a9d988432151aa19fe1e7e19d64
             scope:
               - public_profile
               - email
+            redirect-uri: "http://localhost:8080/oauth2/authorization/facebook"
+            authorization-grant-type: authorization_code
+            client-name: Google
 
   datasource:
     username: root
Index: BE/Koi-Express/src/main/java/com/koi_express/entity/Customers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.koi_express.entity;\r\n\r\nimport com.koi_express.enums.AuthProvider;\r\nimport com.koi_express.enums.Role;\r\nimport jakarta.persistence.*;\r\nimport jakarta.validation.constraints.Pattern;\r\nimport jakarta.validation.constraints.Size;\r\nimport lombok.*;\r\nimport lombok.experimental.FieldDefaults;\r\nimport org.hibernate.annotations.CreationTimestamp;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\n@Entity\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Builder\r\n@FieldDefaults(level = AccessLevel.PRIVATE)\r\n@Table(uniqueConstraints = {\r\n        @UniqueConstraint(columnNames = {\"email\", \"authProvider\"})\r\n})\r\npublic class Customers {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    Long customerId;\r\n\r\n    @Column(nullable = true, unique = true)\r\n    String email;\r\n\r\n    String fullName;\r\n\r\n    String address;\r\n\r\n    @Column(nullable = true)\r\n    String passwordHash;\r\n\r\n    @Pattern(regexp = \"\\\\d{10}\", message = \"Phone number must contain exactly 10 digits\")\r\n    @Size(min = 10, max = 10, message = \"Phone number must be exactly 10 digits\")\r\n    @Column(nullable = true, unique = true)\r\n    String phoneNumber;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    AuthProvider authProvider;\r\n\r\n    String providerId;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    @Column(nullable = false)\r\n    Role role = Role.CUSTOMER;\r\n\r\n    @Column(updatable = false)\r\n    @CreationTimestamp\r\n    LocalDateTime createdAt = LocalDateTime.now();\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/Koi-Express/src/main/java/com/koi_express/entity/Customers.java b/BE/Koi-Express/src/main/java/com/koi_express/entity/Customers.java
--- a/BE/Koi-Express/src/main/java/com/koi_express/entity/Customers.java	
+++ b/BE/Koi-Express/src/main/java/com/koi_express/entity/Customers.java	
@@ -46,6 +46,8 @@
 
     String providerId;
 
+    private boolean isVerified = false;
+
     @Enumerated(EnumType.STRING)
     @Column(nullable = false)
     Role role = Role.CUSTOMER;
Index: FE/Koi-Express/src/pages/Register/Register.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport './Register.css'\r\n\r\nconst Register = () => {\r\n  const [fullName, setFullName] = useState(\"\");\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  // const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n\r\n  const handlePhoneNumberChange = (e) => {\r\n    const value = e.target.value;\r\n    // Ensure only numbers are entered\r\n    if (/^\\d*$/.test(value)) {\r\n      setPhoneNumber(value);\r\n    }\r\n  };\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    // Validate phone number length\r\n    if (phoneNumber.length !== 10) {\r\n      setError(\"Please enter exactly 10 digits for the phone number.\");\r\n      return;\r\n    }\r\n\r\n    setError(\"\"); // Clear errors\r\n\r\n    // API request payload\r\n    const requestData = {\r\n      fullName,\r\n      phoneNumber,\r\n      password,\r\n    };\r\n\r\n    try {\r\n      // Axios POST request to the register endpoint\r\n      const response = await axios.post(\"http://localhost:8080/api/auth/register\", requestData, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        setSuccess(\"Registration successful!\");\r\n        // Optionally clear form or redirect\r\n\r\n        setFullName(\"\");\r\n        setPhoneNumber(\"\");\r\n        setPassword(\"\");\r\n      } else {\r\n        setError(\"Registration failed. Please try again.\");\r\n      }\r\n    } catch (err) {\r\n      if (err.response) {\r\n        switch (err.response.status) {\r\n          case 400:\r\n            setError(\"Invalid data. Please check your input.\");\r\n            break;\r\n          case 500:\r\n            setError(\"Server error. Please try again later.\");\r\n            break;\r\n          default:\r\n            setError(\"An error occurred. Please try again.\");\r\n        }\r\n      } else {\r\n        setError(\"An error occurred. Please try again.\");\r\n      }\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <div className=\"flex items-center justify-center w-full min-h-screen registerpage\">\r\n          <div className=\"w-[32%] h-auto py-10 px-12 rounded-xl registercard\">\r\n            <div className=\"w-full h-auto\">\r\n              <h1 className=\"text-[2rem] text-white font-semibold-mb-1 text-center\">\r\n                Sign up\r\n              </h1>\r\n            </div>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n              {/* Username Field */}\r\n              <div className=\"w-full h-auto mb-5\">\r\n                <label htmlFor=\"fullName\" className=\"block mb-1 text-white\">\r\n                  FullName\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"fullName\"\r\n                  value={fullName}\r\n                  onChange={(e) => setFullName(e.target.value)}\r\n                  className=\"w-full h-12 p-4 outline-none bg-transparent border-[2px] border-gray-200/40 text-white rounded-md\"\r\n                  placeholder=\"Enter your FullName\"\r\n                />\r\n              </div>\r\n\r\n              {/* Phone Number Field */}\r\n              <div className=\"w-full h-auto mb-5\">\r\n                <label htmlFor=\"phone\" className=\"block mb-1 text-white\">\r\n                  Phone Number\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"phone\"\r\n                  value={phoneNumber}\r\n                  onChange={handlePhoneNumberChange}\r\n                  maxLength=\"10\"\r\n                  className=\"w-full h-12 p-4 outline-none bg-transparent border-[2px] border-gray-200/40 text-white rounded-md\"\r\n                  placeholder=\"Enter your phone number\"\r\n                />\r\n              </div>\r\n\r\n              {/* Error and Success Messages */}\r\n              {error && <p className=\"mb-5 text-sm text-red-500\">{error}</p>}\r\n              {success && (\r\n                <p className=\"mb-5 text-sm text-green-500\">{success}</p>\r\n              )}\r\n\r\n              {/* Password Field */}\r\n              <div className=\"w-full h-auto mb-9\">\r\n                <label htmlFor=\"password\" className=\"block mb-1 text-white\">\r\n                  Password\r\n                </label>\r\n                <input\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                  className=\"w-full h-12 p-4 outline-none bg-transparent border-[2px] border-gray-200/40 text-white rounded-md\"\r\n                  placeholder=\"Enter your password\"\r\n                />\r\n              </div>\r\n\r\n\r\n              <button\r\n                type=\"submit\"\r\n                disabled={!fullName || !phoneNumber || !password}\r\n                className={`w-full h-12 text-lg font-medium text-black rounded-md outline-none mb-7 \r\n             bg-white/70 ${!fullName || !phoneNumber || !password ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n              >\r\n                Sign up\r\n              </button>\r\n            </form>\r\n\r\n            <div className=\"flex items-center justify-center w-full h-auto gap-x-1\">\r\n              <p className=\"text-base font-medium text-white\">\r\n                Already have an account?\r\n              </p>\r\n              <Link\r\n                to=\"/login\"\r\n                className=\"text-base font-medium text-white duration-500 ease-out hover:underline\"\r\n              >\r\n                Back to login\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  export default Register;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FE/Koi-Express/src/pages/Register/Register.jsx b/FE/Koi-Express/src/pages/Register/Register.jsx
--- a/FE/Koi-Express/src/pages/Register/Register.jsx	
+++ b/FE/Koi-Express/src/pages/Register/Register.jsx	
@@ -2,12 +2,13 @@
 import { Link } from "react-router-dom";
 import axios from "axios";
 import './Register.css'
+import OtpVerification from "../../OtpVerification";
 
 const Register = () => {
   const [fullName, setFullName] = useState("");
   const [phoneNumber, setPhoneNumber] = useState("");
   const [password, setPassword] = useState("");
-  // const [confirmPassword, setConfirmPassword] = useState("");
+  const [otpSent, setOtpSent] = useState(false);
   const [error, setError] = useState("");
   const [success, setSuccess] = useState("");
 
@@ -48,6 +49,7 @@
       if (response.status === 200) {
         setSuccess("Registration successful!");
         // Optionally clear form or redirect
+        setOtpSent(true);
 
         setFullName("");
         setPhoneNumber("");
@@ -73,7 +75,9 @@
       }
     };
 
-    return (
+    return otpSent ? (
+      <OtpVerification phoneNumber = { phoneNumber} />
+    ) : (
       <>
         <div className="flex items-center justify-center w-full min-h-screen registerpage">
           <div className="w-[32%] h-auto py-10 px-12 rounded-xl registercard">
Index: BE/Koi-Express/src/main/java/com/koi_express/config/ManagerAccount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.koi_express.config;\r\n\r\nimport com.koi_express.entity.Customers;\r\nimport com.koi_express.enums.AuthProvider;\r\nimport com.koi_express.enums.Role;\r\nimport com.koi_express.repository.CustomersRepository;\r\nimport jakarta.annotation.PostConstruct;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\n@Component\r\npublic class ManagerAccount {\r\n\r\n    private final CustomersRepository customersRepository;\r\n    private final PasswordEncoder passwordEncoder;\r\n\r\n    @Autowired\r\n    public ManagerAccount(CustomersRepository customersRepository, PasswordEncoder passwordEncoder) {\r\n        this.customersRepository = customersRepository;\r\n        this.passwordEncoder = passwordEncoder;\r\n    }\r\n\r\n    @PostConstruct\r\n    public void init() {\r\n        String managerPhone = \"0981667547\";\r\n        String managerEmail = \"manager@koi-express.com\";\r\n\r\n        if(!customersRepository.existsByEmail(managerEmail)) {\r\n            Customers manager = Customers.builder()\r\n                    .phoneNumber(managerPhone)\r\n                    .email(managerEmail)\r\n                    .passwordHash(passwordEncoder.encode(\"manager123\"))\r\n                    .authProvider(AuthProvider.LOCAL)\r\n                    .role(Role.MANAGER)\r\n                    .createdAt(LocalDateTime.now())\r\n                    .build();\r\n\r\n            customersRepository.save(manager);\r\n\r\n            System.out.println(\"Manager account created successfully!\");\r\n        } else {\r\n            System.out.println(\"Manager account already exists!\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/Koi-Express/src/main/java/com/koi_express/config/ManagerAccount.java b/BE/Koi-Express/src/main/java/com/koi_express/config/ManagerAccount.java
--- a/BE/Koi-Express/src/main/java/com/koi_express/config/ManagerAccount.java	
+++ b/BE/Koi-Express/src/main/java/com/koi_express/config/ManagerAccount.java	
@@ -25,7 +25,7 @@
 
     @PostConstruct
     public void init() {
-        String managerPhone = "0981667547";
+        String managerPhone = "0000000000";
         String managerEmail = "manager@koi-express.com";
 
         if(!customersRepository.existsByEmail(managerEmail)) {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5de1b9a1-1f08-4f18-8ab7-0f0d13f608a0\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <projects_view />\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"JpbToolWindowState\">\r\n    <option name=\"isToolWindowVisible\" value=\"false\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2mKfnJ1LEUhwbsJkQyH5WoNrmBs\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Notification.DisplayName-DoNotAsk-GitHub Copilot\": \"GitHub Copilot\",\r\n    \"Notification.DoNotAsk-GitHub Copilot\": \"true\",\r\n    \"RequestMappingsPanelOrder0\": \"0\",\r\n    \"RequestMappingsPanelOrder1\": \"1\",\r\n    \"RequestMappingsPanelWidth0\": \"75\",\r\n    \"RequestMappingsPanelWidth1\": \"75\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"Spring Boot.KoiExpressApplication.executor\": \"Run\",\r\n    \"git-widget-placeholder\": \"FE\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"D:/FPT/Semester 5/SWP/Koi_Express\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"MavenRunHelper\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"KoiExpressApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <module name=\"Koi-Express\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.koi_express.KoiExpressApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9f38398b9061-39b83d9b5494-intellij.indexing.shared.core-IU-241.17011.79\" />\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-IU-241.17011.79\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5de1b9a1-1f08-4f18-8ab7-0f0d13f608a0\" name=\"Changes\" comment=\"\" />\r\n      <created>1726830354524</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1726830354524</updated>\r\n      <workItem from=\"1726830356299\" duration=\"110000\" />\r\n      <workItem from=\"1726830509104\" duration=\"207000\" />\r\n      <workItem from=\"1727271245290\" duration=\"88000\" />\r\n      <workItem from=\"1727276436661\" duration=\"3672000\" />\r\n      <workItem from=\"1727320260905\" duration=\"5526000\" />\r\n      <workItem from=\"1727328426682\" duration=\"2020000\" />\r\n      <workItem from=\"1727357719982\" duration=\"10727000\" />\r\n      <workItem from=\"1727369047041\" duration=\"1018000\" />\r\n      <workItem from=\"1727370117125\" duration=\"1460000\" />\r\n      <workItem from=\"1727372728921\" duration=\"237000\" />\r\n      <workItem from=\"1727373013118\" duration=\"3944000\" />\r\n      <workItem from=\"1727377613299\" duration=\"5444000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,7 +4,17 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5de1b9a1-1f08-4f18-8ab7-0f0d13f608a0" name="Changes" comment="" />
+    <list default="true" id="5de1b9a1-1f08-4f18-8ab7-0f0d13f608a0" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BE/Koi-Express/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/BE/Koi-Express/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BE/Koi-Express/src/main/java/com/koi_express/config/ManagerAccount.java" beforeDir="false" afterPath="$PROJECT_DIR$/BE/Koi-Express/src/main/java/com/koi_express/config/ManagerAccount.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BE/Koi-Express/src/main/java/com/koi_express/config/SecurityConfig.java" beforeDir="false" afterPath="$PROJECT_DIR$/BE/Koi-Express/src/main/java/com/koi_express/config/SecurityConfig.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BE/Koi-Express/src/main/java/com/koi_express/controller/AuthController.java" beforeDir="false" afterPath="$PROJECT_DIR$/BE/Koi-Express/src/main/java/com/koi_express/controller/AuthController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BE/Koi-Express/src/main/java/com/koi_express/entity/Customers.java" beforeDir="false" afterPath="$PROJECT_DIR$/BE/Koi-Express/src/main/java/com/koi_express/entity/Customers.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BE/Koi-Express/src/main/java/com/koi_express/service/CustomerService.java" beforeDir="false" afterPath="$PROJECT_DIR$/BE/Koi-Express/src/main/java/com/koi_express/service/CustomerService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BE/Koi-Express/src/main/resources/application-secret.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/BE/Koi-Express/src/main/resources/application-secret.yaml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BE/Koi-Express/src/main/resources/application.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/BE/Koi-Express/src/main/resources/application.yaml" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -45,28 +55,28 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Notification.DisplayName-DoNotAsk-GitHub Copilot": "GitHub Copilot",
-    "Notification.DoNotAsk-GitHub Copilot": "true",
-    "RequestMappingsPanelOrder0": "0",
-    "RequestMappingsPanelOrder1": "1",
-    "RequestMappingsPanelWidth0": "75",
-    "RequestMappingsPanelWidth1": "75",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "Spring Boot.KoiExpressApplication.executor": "Run",
-    "git-widget-placeholder": "FE",
-    "kotlin-language-version-configured": "true",
-    "last_opened_file_path": "D:/FPT/Semester 5/SWP/Koi_Express",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "settings.editor.selected.configurable": "MavenRunHelper",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Notification.DisplayName-DoNotAsk-GitHub Copilot&quot;: &quot;GitHub Copilot&quot;,
+    &quot;Notification.DoNotAsk-GitHub Copilot&quot;: &quot;true&quot;,
+    &quot;RequestMappingsPanelOrder0&quot;: &quot;0&quot;,
+    &quot;RequestMappingsPanelOrder1&quot;: &quot;1&quot;,
+    &quot;RequestMappingsPanelWidth0&quot;: &quot;75&quot;,
+    &quot;RequestMappingsPanelWidth1&quot;: &quot;75&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;Spring Boot.KoiExpressApplication.executor&quot;: &quot;Run&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;FE&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;D:/FPT/Semester 5/SWP/Koi_Express&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;MavenRunHelper&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RunManager">
     <configuration name="KoiExpressApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
       <module name="Koi-Express" />
@@ -104,6 +114,7 @@
       <workItem from="1727372728921" duration="237000" />
       <workItem from="1727373013118" duration="3944000" />
       <workItem from="1727377613299" duration="5444000" />
+      <workItem from="1727407710172" duration="16650000" />
     </task>
     <servers />
   </component>
